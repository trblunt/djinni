// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from deprecated.djinni

package com.dropbox.djinni.test;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.annotation.CheckForNull;
import javax.annotation.Nonnull;

/** @deprecated */
@Deprecated
public abstract class DeprecatedInterface {
    /** @deprecated Deprecated constant */
    @Deprecated
    public static final int BAZ = 0;

    /** @deprecated */
    @Deprecated
    public abstract int foo();

    /** @deprecated This is a deprecation message */
    @Deprecated
    public abstract int bar();

    public static final class CppProxy extends DeprecatedInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public int foo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_foo(this.nativeRef);
        }
        private native int native_foo(long _nativeRef);

        @Override
        public int bar()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_bar(this.nativeRef);
        }
        private native int native_bar(long _nativeRef);
    }
}
