// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from deprecated.djinni

#pragma once

#include "deprecated_interface.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeDeprecatedInterface final : ::djinni::JniInterface<::testsuite::DeprecatedInterface, NativeDeprecatedInterface> {
public:
    using CppType = std::shared_ptr<::testsuite::DeprecatedInterface>;
    using CppOptType = std::shared_ptr<::testsuite::DeprecatedInterface>;
    using JniType = jobject;

    using Boxed = NativeDeprecatedInterface;

    ~NativeDeprecatedInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeDeprecatedInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeDeprecatedInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeDeprecatedInterface();
    friend ::djinni::JniClass<NativeDeprecatedInterface>;
    friend ::djinni::JniInterface<::testsuite::DeprecatedInterface, NativeDeprecatedInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::testsuite::DeprecatedInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        int32_t foo() override;
        int32_t bar() override;

    private:
        friend ::djinni::JniInterface<::testsuite::DeprecatedInterface, ::djinni_generated::NativeDeprecatedInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/dropbox/djinni/test/DeprecatedInterface") };
    const jmethodID method_foo { ::djinni::jniGetMethodID(clazz.get(), "foo", "()I") };
    const jmethodID method_bar { ::djinni::jniGetMethodID(clazz.get(), "bar", "()I") };
};

} // namespace djinni_generated
